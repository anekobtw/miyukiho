from aiogram import F, Router, types
from aiogram.filters.command import Command

import database
from utils.admin import ban
from utils.logging import log

router = Router()


@router.message(Command("ban"))
async def ban_cmd(message: types.Message):
    # Is admin?
    member = await message.chat.get_member(message.from_user.id)
    if not isinstance(member, (types.ChatMemberAdministrator, types.ChatMemberOwner)):
        return

    # Is the message a reply?
    reply = message.reply_to_message
    if not reply:
        await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # Is there enough arguments?
    try:
        _, *reason = message.text.split(" ")
    except ValueError:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –≤ –Ω–∏—Ö –µ—Å—Ç—å –æ—à–∏–±–∫–∞.")
        return

    # Ban and log
    await ban(chat=message.chat, user_id=reply.from_user.id)

    database.insert_log(
        admin_id=message.from_user.id,
        user_id=reply.from_user.id,
        action="ban",
        reason=" ".join(reason),
    )

    text = f"""
<b>üö´ –ù–æ–≤—ã–π –±–∞–Ω!</b>

<b>–ê–¥–º–∏–Ω:</b> @{message.from_user.username}
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{reply.from_user.username}
<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {' '.join(reason)}
"""

    await log(text=text)

    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{reply.from_user.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω!")
