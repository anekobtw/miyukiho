import os

from aiogram import F, Router, types
from aiogram.filters.command import Command
from dotenv import load_dotenv

from utils.admin import mute
from utils.logging import log

load_dotenv()
router = Router()


@router.message(Command("ban"))
async def mute_cmd(message: types.Message):
    # Is admin?
    member = await message.chat.get_member(message.from_user.id)
    if not isinstance(member, (types.ChatMemberOwner, types.ChatMemberAdministrator)):
        return

    # Is the message a reply?
    reply = message.reply_to_message
    if not reply:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # Is there enough arguments?
    try:
        _, duration, *reason = message.text.split(" ")
    except ValueError:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –≤ –Ω–∏—Ö –µ—Å—Ç—å –æ—à–∏–±–∫–∞.")
        return

    # Mute and log
    await mute(chat=message.chat, user_id=reply.from_user.id, duration=duration)
    
    await log(
        group_id=os.getenv("LOGS_CHANNEL"),
        text=f"<b>üö´ –ù–æ–≤—ã–π –º—É—Ç!</b>\n\n<b>–ê–¥–º–∏–Ω:</b> @{message.from_user.username}\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{reply.from_user.username}\n<b>–î–æ:</b> {until.strftime("%d %B %Y %H:%M:%S")}\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {' '.join(reason)}",
    )
    
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{reply.from_user.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–º—É—á–µ–Ω!")

